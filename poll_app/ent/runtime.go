// Code generated by ent, DO NOT EDIT.

package ent

import (
	"poll_app/ent/poll"
	"poll_app/ent/polloption"
	"poll_app/ent/schema"
	"poll_app/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	pollFields := schema.Poll{}.Fields()
	_ = pollFields
	// pollDescQuestion is the schema descriptor for question field.
	pollDescQuestion := pollFields[0].Descriptor()
	// poll.QuestionValidator is a validator for the "question" field. It is called by the builders before save.
	poll.QuestionValidator = pollDescQuestion.Validators[0].(func(string) error)
	polloptionFields := schema.PollOption{}.Fields()
	_ = polloptionFields
	// polloptionDescText is the schema descriptor for text field.
	polloptionDescText := polloptionFields[0].Descriptor()
	// polloption.TextValidator is a validator for the "text" field. It is called by the builders before save.
	polloption.TextValidator = polloptionDescText.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[0].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
